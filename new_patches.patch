diff --git a/Unreal/Plugins/AirSim/Source/RecordingThread.cpp b/Unreal/Plugins/AirSim/Source/RecordingThread.cpp
index 8a95839..e8a20bf 100644
--- a/Unreal/Plugins/AirSim/Source/RecordingThread.cpp
+++ b/Unreal/Plugins/AirSim/Source/RecordingThread.cpp
@@ -69,10 +69,10 @@ void FRecordingThread::SaveImage(TArray<uint8>& compressedPng)
 
             uint64_t timestamp_millis = static_cast<uint64_t>(clock_->nowNanos() / 1.0E6);
 
-            GameThread->record_file << timestamp_millis << "\t";
-            GameThread->record_file << kinematics.pose.position.x() << "\t" << kinematics.pose.position.y() << "\t" << kinematics.pose.position.z() << "\t";
-            GameThread->record_file << kinematics.pose.orientation.w() << "\t" << kinematics.pose.orientation.x() << "\t" << kinematics.pose.orientation.y() << "\t" << kinematics.pose.orientation.z() << "\t";
-            GameThread->record_file << "\n";
+            // GameThread->record_file << timestamp_millis << "\t";
+            // GameThread->record_file << kinematics.pose.position.x() << "\t" << kinematics.pose.position.y() << "\t" << kinematics.pose.position.z() << "\t";
+            // GameThread->record_file << kinematics.pose.orientation.w() << "\t" << kinematics.pose.orientation.x() << "\t" << kinematics.pose.orientation.y() << "\t" << kinematics.pose.orientation.z() << "\t";
+            // GameThread->record_file << "\n";
 
             UAirBlueprintLib::LogMessage(TEXT("Screenshot saved to:"), filePath, LogDebugLevel::Success);
             imagesSaved++;
diff --git a/Unreal/Plugins/AirSim/Source/SimMode/SimModeBase.h b/Unreal/Plugins/AirSim/Source/SimMode/SimModeBase.h
index 739d28b..156c490 100644
--- a/Unreal/Plugins/AirSim/Source/SimMode/SimModeBase.h
+++ b/Unreal/Plugins/AirSim/Source/SimMode/SimModeBase.h
@@ -37,7 +37,7 @@ public:
 
     FString getRecordingPath();
 
-    std::ofstream record_file;
+    // std::ofstream record_file;
     std::string record_filename = "airsim_rec";    
 protected:
     virtual void setupInputBindings();
diff --git a/Unreal/Plugins/AirSim/Source/SimMode/SimModeWorldMultiRotor.cpp b/Unreal/Plugins/AirSim/Source/SimMode/SimModeWorldMultiRotor.cpp
index b9c557a..cdb9f6c 100644
--- a/Unreal/Plugins/AirSim/Source/SimMode/SimModeWorldMultiRotor.cpp
+++ b/Unreal/Plugins/AirSim/Source/SimMode/SimModeWorldMultiRotor.cpp
@@ -6,7 +6,7 @@
 #include <memory>
 #include "FlyingPawn.h"
 #include "Logging/MessageLog.h"
-#include "vehicles/MultiRotorParamsFactory.hpp"
+#include "vehicles/MultiRotorParamsFactory.hpp"
 
 
 ASimModeWorldMultiRotor::ASimModeWorldMultiRotor()
@@ -85,19 +85,19 @@ void ASimModeWorldMultiRotor::Tick(float DeltaSeconds)
 {
     if (fpv_vehicle_connector_ != nullptr && fpv_vehicle_connector_->isApiServerStarted() && getVehicleCount() > 0) {
 
-        if (isRecording() && record_file.is_open()) {
-            if (!isLoggingStarted)
-            {
-                FString imagePathPrefix = common_utils::FileSystem::getLogFileNamePath("img_", "", "", false).c_str();
-                FRecordingThread::ThreadInit(imagePathPrefix, this);
-                isLoggingStarted = true;
+        if (isRecording() /* && record_file.is_open() */) {
+            if (!isLoggingStarted)
+            {
+                FString imagePathPrefix = common_utils::FileSystem::getLogFileNamePath("img_", "", "", false).c_str();
+                FRecordingThread::ThreadInit(imagePathPrefix, this);
+                isLoggingStarted = true;
             }
         }
 
-        if (!isRecording() && isLoggingStarted)
-        {
-            FRecordingThread::Shutdown();
-            isLoggingStarted = false;
+        if (!isRecording() && isLoggingStarted)
+        {
+            FRecordingThread::Shutdown();
+            isLoggingStarted = false;
         }
     }
 
@@ -110,10 +110,10 @@ void ASimModeWorldMultiRotor::EndPlay(const EEndPlayReason::Type EndPlayReason)
         fpv_vehicle_connector_->stopApiServer();
     }
 
-    if (isLoggingStarted)
-    {
-        FRecordingThread::Shutdown();
-        isLoggingStarted = false;
+    if (isLoggingStarted)
+    {
+        FRecordingThread::Shutdown();
+        isLoggingStarted = false;
     }
 
     for (AActor* actor : spawned_actors_) {
